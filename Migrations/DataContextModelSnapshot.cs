// <auto-generated />
using System;
using Fitness_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitnessApplication.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiaryFoodProduct", b =>
                {
                    b.Property<int>("DiaryId")
                        .HasColumnType("integer");

                    b.Property<int>("Food_ProductId")
                        .HasColumnType("integer");

                    b.HasKey("DiaryId", "Food_ProductId");

                    b.HasIndex("Food_ProductId");

                    b.ToTable("DiaryFoodProduct");
                });

            modelBuilder.Entity("Fitness_Application.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Fitness_Application.Models.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<float>("Burned_Calories")
                        .HasColumnType("real");

                    b.Property<float>("Consumed_Calories")
                        .HasColumnType("real");

                    b.Property<float>("Current_Weight")
                        .HasColumnType("real");

                    b.Property<DateTime>("DailyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Meal_Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("Fitness_Application.Models.FoodProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Added_Sugar")
                        .HasColumnType("integer");

                    b.Property<int>("Calcium")
                        .HasColumnType("integer");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("Cholesterol")
                        .HasColumnType("integer");

                    b.Property<int>("Dietary_Fiber")
                        .HasColumnType("integer");

                    b.Property<int>("Iron")
                        .HasColumnType("integer");

                    b.Property<int>("Monounsaturated")
                        .HasColumnType("integer");

                    b.Property<int>("Polyunsaturated")
                        .HasColumnType("integer");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Protein")
                        .HasColumnType("integer");

                    b.Property<int>("Saturated")
                        .HasColumnType("integer");

                    b.Property<int>("Sodium")
                        .HasColumnType("integer");

                    b.Property<int>("Sugar")
                        .HasColumnType("integer");

                    b.Property<int>("Sugar_Alcohols")
                        .HasColumnType("integer");

                    b.Property<int>("Total_Carbohydrates")
                        .HasColumnType("integer");

                    b.Property<int>("Total_Fat")
                        .HasColumnType("integer");

                    b.Property<int>("Trans")
                        .HasColumnType("integer");

                    b.Property<int>("Vitamin_A")
                        .HasColumnType("integer");

                    b.Property<int>("Vitamin_C")
                        .HasColumnType("integer");

                    b.Property<int>("Vitamin_D")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FoodProducts");
                });

            modelBuilder.Entity("Fitness_Application.Models.Preferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Baseline_Activity")
                        .HasColumnType("integer");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<float>("Weekly_Goal")
                        .HasColumnType("real");

                    b.Property<float>("Weight_Goal")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("DiaryFoodProduct", b =>
                {
                    b.HasOne("Fitness_Application.Models.Diary", null)
                        .WithMany()
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness_Application.Models.FoodProduct", null)
                        .WithMany()
                        .HasForeignKey("Food_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitness_Application.Models.Diary", b =>
                {
                    b.HasOne("Fitness_Application.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Fitness_Application.Models.Preferences", b =>
                {
                    b.HasOne("Fitness_Application.Models.Account", "Account")
                        .WithOne("Account_Preferences")
                        .HasForeignKey("Fitness_Application.Models.Preferences", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Fitness_Application.Models.Account", b =>
                {
                    b.Navigation("Account_Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
